/* Generated By:JavaCC: Do not edit this line. EG1.java */
import data.*;
//import data.strips.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Hashtable;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class EG1 implements EG1Constants {

  protected static InformationFile IP = new InformationFile();
  protected static Map auxPreferenceMap = new Hashtable();



   public static InformationFile parseFiles(File domain, File problem) {
     // EG1 parser = new EG1 (domain);
       parseDomainFile(domain);
      //parser = new EG1(domain);
       parseProblemFile(problem);

       return IP;

  }

  private static void parseDomainFile(File domain) {

        try {
           FileReader domainFileReader = new FileReader(domain);
           EG1 parser = new EG1 (domainFileReader);
           System.out.println("File " + domain.getAbsoluteFile());
           parser.parseDomain();
           domainFileReader.close();

                        } catch (FileNotFoundException e) {
                                        System.out.println("File not found" + e.getMessage());

            }catch (IOException e) {
                                        System.out.println("File not found" + e.getMessage());

            }

                         catch (ParseException e) {
                                        System.out.println("File nparser file" + e.getMessage());

            }

    }

    private static void parseProblemFile(File problem) {

        try {

           FileReader problemFileReader = new FileReader(problem);
           System.out.println("File " + problem.getAbsoluteFile());
           EG1 parser = new EG1 (problemFileReader);
           parser.parseProblem();
                   problemFileReader.close();
                        }catch (FileNotFoundException e) {
                                        System.out.println("File not found" + e.getMessage());

            }catch (IOException e) {
                                        System.out.println("File not found" + e.getMessage());

            }
                        catch (ParseException e) {
                                        System.out.println("File parser file " + e.getMessage());

            }



    }

    private static class TypedList {
                public List objects = new ArrayList();
                public Map types = new Hashtable();    // Maps strings onto Types

                public void add(String s)
                {
                        objects.add(s);
                        //types.put(s,SimpleType.rootType);
                }

                public void add(String s, String t)
                {
                        objects.add(s);
                        types.put(s,t);
                }
        }

  final public boolean parseDomain() throws ParseException {
      Token t;
      boolean req = true;
    jj_consume_token(OPEN);
    jj_consume_token(DEFINE);
    jj_consume_token(OPEN);
    jj_consume_token(DOMAIN);
    t = jj_consume_token(NAME);
    jj_consume_token(CLOSE);
             IP.domainName = t.toString();
    if (jj_2_1(20)) {
      parseRequireDef();
    } else {
      ;
    }
             if(!req) {if (true) return false;}
    if (jj_2_2(20)) {
      parseTypeDef();
    } else {
      ;
    }
    parsePredicatesDef();
    if (jj_2_3(20)) {
      parseActionDef();
    } else {
      ;
    }
    jj_consume_token(CLOSE);
    jj_consume_token(0);
        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean parseRequireDef() throws ParseException {
        Token t;
    jj_consume_token(OPEN);
    jj_consume_token(REQUIREMENTS);
    label_1:
    while (true) {
      if (jj_2_4(20)) {
        ;
      } else {
        break label_1;
      }
      t = jj_consume_token(REQUIREMENT_LABELS);
                                                       IP.requirements.add(t.toString());
    }
    jj_consume_token(CLOSE);
                                                                                                      {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

// ***************************************************
// *	Parse the type definitions
// ***************************************************
  final public void parseTypeDef() throws ParseException {
    Token t     ;
    jj_consume_token(OPEN);
    jj_consume_token(TYPES);
    label_2:
    while (true) {
      t = jj_consume_token(NAME);
                                IP.types.add(t.toString());
      if (jj_2_5(20)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(CLOSE);
  }

// ***************************************************
// *	Parse the predicates
// ***************************************************
  final public void parsePredicatesDef() throws ParseException {
    System.out.println(" ENTRANDO 2 NO PREDICATE" );
    jj_consume_token(OPEN);
    jj_consume_token(PREDICATES);
    label_3:
    while (true) {
      parsePredicate();
      if (jj_2_6(20)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(CLOSE);
  }

  final public void parsePredicate() throws ParseException {
    Token t;

    String namePredicate="";
    List< VarTypes> lstParameteres = new ArrayList< VarTypes>();
    jj_consume_token(OPEN);
    label_4:
    while (true) {
      namePredicate = predicateSymbol();
                System.out.println(" Predicate  - > " + namePredicate );
      lstParameteres = parseLisType();
                IP.predicatesMap.put(namePredicate,lstParameteres);
      if (jj_2_7(20)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(CLOSE);
  }

  final public String predicateSymbol() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
     {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public List< VarTypes> parseLisType() throws ParseException {
  Token t;
  List< VarTypes> lstParameteres = new ArrayList< VarTypes>();
  String var="", type="";
  VarTypes varTypes;
    label_5:
    while (true) {
      t = jj_consume_token(VAR);
            var = t.toString();
      System.out.println(" vari\u00e1vel  - > " + var);
      jj_consume_token(TYPE_IDENT);
      t = jj_consume_token(NAME);
       type = t.toString();
           System.out.println(" tipo  - > " + type);
           type = t.toString();
       varTypes = new VarTypes(var, type);
       lstParameteres.add(varTypes);
      if (jj_2_8(20)) {
        ;
      } else {
        break label_5;
      }
    }
      {if (true) return  lstParameteres;}
    throw new Error("Missing return statement in function");
  }

// ***************************************************
// *	Parse the actions
// ***************************************************
  final public void parseActionDef() throws ParseException {
  Token t,k;
  Action action = new Action();
  List< VarTypes> lstParameteres = new ArrayList< VarTypes>();
  PrecondictionAction pca = new PrecondictionAction();
  Effect eff = new Effect();
  String aux="";
  TypedList tl;
    label_6:
    while (true) {
      jj_consume_token(OPEN);
      jj_consume_token(ACTION);
      action.nameAction = nameAction();
      jj_consume_token(PARAMETERS);
      jj_consume_token(OPEN);
      lstParameteres = parseLisType();
      jj_consume_token(CLOSE);
                 IP.action.add(action);
                 Iterator it = lstParameteres.iterator();
                 while(it.hasNext()) {
                       VarTypes  varTypes = (VarTypes)it.next();
                                action.parameters.add(varTypes.getType());
                 }
      jj_consume_token(PRECONDITION);
      jj_consume_token(OPEN);
      jj_consume_token(AND);
      label_7:
      while (true) {
        if (jj_2_9(20)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(OPEN);
        tl = structureAction();
        jj_consume_token(CLOSE);
                                      pca.objects = tl.objects;
                                          pca.precondiction = tl.types;
                                          action.lstPreCondictions.add(pca);
      }
      jj_consume_token(CLOSE);
      jj_consume_token(EFFECT);
      jj_consume_token(OPEN);
      action.lstEffect = getEffect();
      jj_consume_token(CLOSE);
      jj_consume_token(CLOSE);
      if (jj_2_10(20)) {
        ;
      } else {
        break label_6;
      }
    }
  }

  final public String nameAction() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
          System.out.println(" NAME OF THE ACTION:  " + t.toString());
          {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public TypedList structureAction() throws ParseException {
  Token t,k;
  TypedList lst = new TypedList();
   String aux="";
    t = jj_consume_token(NAME);
                        System.out.println(" PRECONDICTIONS  2- > " + t.toString());
                        aux= t.toString();
                                                lst.add(aux);
    label_8:
    while (true) {
      if (jj_2_11(20)) {
        ;
      } else {
        break label_8;
      }
      k = jj_consume_token(VAR);
                                                System.out.println(" PRECONDICTIONS 3 - > " + k.toString());
                                                lst.add(aux, k.toString());
    }
         {if (true) return lst;}
    throw new Error("Missing return statement in function");
  }

  final public List <Effect> getAux() throws ParseException {
  List< Effect> ls = new ArrayList<Effect>();
  Effect eff = new Effect();
  TypedList tl;
    if (jj_2_12(20)) {
      jj_consume_token(NOT);
      jj_consume_token(OPEN);
      tl = structureAction();
      jj_consume_token(CLOSE);
                  System.out.println("***** EFFECT WITH NOT *****");
                              eff.objects = tl.objects;
                              eff.effect = tl.types;
                              eff.value.put(tl.types, true);
                              ls.add(eff);
                              {if (true) return ls;}
    } else if (jj_2_13(20)) {
      tl = structureAction();
                         System.out.println("#######  EFFECT WITHOUT NOT ####### ");

                         eff.objects = tl.objects;
                          eff.effect = tl.types;
                         eff.value.put(tl.types, false);
                         ls.add(eff);
              System.out.println(" SAIU  - > ");
               {if (true) return ls;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List <Effect> getEffect() throws ParseException {
  List< Effect> ls = new ArrayList<Effect>();
  Effect eff = new Effect();
  TypedList tl;
    label_9:
    while (true) {
      if (jj_2_14(20)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_15(20)) {
        jj_consume_token(AND);
        jj_consume_token(OPEN);
        ls = getAux();
        jj_consume_token(CLOSE);
                                          System.out.println(" EFFECT WITH NOT NEWLY - > ");
                                                      eff.value.put(ls, false);
                                                      ls.add(eff);
      } else if (jj_2_16(20)) {
        jj_consume_token(OPEN);
        ls = getAux();
        jj_consume_token(CLOSE);
                                                         System.out.println(" EFFECT WITHOUT NOT   - > ");

                                                         eff.value.put(ls, true);
                                                         ls.add(eff);
                                              System.out.println(" SAIU  - > ");
      } else if (jj_2_17(20)) {
        ls = getAux();
                        eff.value.put(ls, true);
                                                ls.add(eff);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return ls;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************************************************************************
*
*															File Problem
*
*******************************************************************************************************************************************/
  final public void parseProblem() throws ParseException {
    defineProblem();
  }

  final public void defineProblem() throws ParseException {
  Token t,k;
  String nameProblem = "";
  String nameDomain = "";
    jj_consume_token(OPEN);
    jj_consume_token(DEFINE);
    jj_consume_token(OPEN);
    jj_consume_token(PROBLEM);
    t = jj_consume_token(NAME);
    jj_consume_token(CLOSE);
    jj_consume_token(OPEN);
    jj_consume_token(DOMAIN_LABEL);
    k = jj_consume_token(NAME);
    jj_consume_token(CLOSE);
    IP.defineProblemMap.put(t.toString(),k.toString());
    getMapObjects();
    getMapInit();
    getMapGoal();
    getMapPreferences();
  }

  final public void getMapObjects() throws ParseException {
    jj_consume_token(OPEN);
    jj_consume_token(OBJECTS);
    getObject();
    jj_consume_token(CLOSE);
  }

  final public void getMapInit() throws ParseException {
    jj_consume_token(OPEN);
    jj_consume_token(INIT);
    getInit();
    jj_consume_token(CLOSE);
  }

  final public void getMapGoal() throws ParseException {
    jj_consume_token(OPEN);
    jj_consume_token(GOAL);
    jj_consume_token(OPEN);
    jj_consume_token(AND);
    getGoal();
    jj_consume_token(CLOSE);
    jj_consume_token(CLOSE);
  }

  final public void getMapPreferences() throws ParseException {
 List symbolPreference = new ArrayList();
    Token t;
     System.out.println(" ESTIVE AQUI ");
    jj_consume_token(OPEN);
    jj_consume_token(CONSTRAINTS);
    jj_consume_token(OPEN);
    jj_consume_token(AND);
    getPreference();
    jj_consume_token(CLOSE);
  }

  final public void getObject() throws ParseException {
    Token t;
    //String object="";
    String type = "";
    List object= new ArrayList();
    label_10:
    while (true) {
      label_11:
      while (true) {
        if (jj_2_18(20)) {
          ;
        } else {
          break label_11;
        }
        t = jj_consume_token(NAME);
                              object.add(t.toString());
      }
      jj_consume_token(TYPE_IDENT);
      t = jj_consume_token(NAME);
                                                          type= t.toString();
                             IP.objectMap.put(type, object);
                             System.out.println(" DE NOVO " + type + " " + object);
                             object.clear();
      if (jj_2_19(20)) {
        ;
      } else {
        break label_10;
      }
    }
      System.out.println(" DE NOVO asasasasas ");
  }

  final public void getInit() throws ParseException {
    Token t;
    //String object="";
    String type = "";
    List object= new ArrayList();
            System.out.println(" ENTRANDO NO  INIT ");
    label_12:
    while (true) {
      jj_consume_token(OPEN);
      t = jj_consume_token(NAME);
                            type= t.toString();
      label_13:
      while (true) {
        t = jj_consume_token(NAME);
                                       object.add(t.toString());
        if (jj_2_20(20)) {
          ;
        } else {
          break label_13;
        }
      }
                             IP.initMap.put(type, object);
                             System.out.println(" INIT " + type + " " + object);
                             object.clear();
      jj_consume_token(CLOSE);
      if (jj_2_21(20)) {
        ;
      } else {
        break label_12;
      }
    }
      System.out.println(" SAIDA INIT ");
  }

  final public void getGoal() throws ParseException {
    Token t;
    String objectSymbol="";
    List value = new ArrayList();
            System.out.println(" INPUT GOAL ");
    label_14:
    while (true) {
      jj_consume_token(OPEN);
      t = jj_consume_token(NAME);
                            objectSymbol= t.toString();
      label_15:
      while (true) {
        t = jj_consume_token(NAME);
                                       value.add(t.toString());
        if (jj_2_22(20)) {
          ;
        } else {
          break label_15;
        }
      }
                             IP.goalMap.put(objectSymbol, value);
                             System.out.println(" GOAL " + objectSymbol + " " + value);
                             value.clear();
      jj_consume_token(CLOSE);
      if (jj_2_23(20)) {
        ;
      } else {
        break label_14;
      }
    }
      System.out.println(" OUTPUT GOAL ");
  }

  final public void getPreference() throws ParseException {
    Token t,k;
    Set object = new HashSet();
    String typePreference="";
    String objectSymbol = "";
    Predicate predicate;
    Map auxMap = new Hashtable();
    Map<Object, List<Object > > auxMap2 = new Hashtable<Object, List<Object > >();
    List  lstVarPredicate;
    List lstPredicate  ;
       System.out.println(" INPUT PREFERENCE ");
    label_16:
    while (true) {
      jj_consume_token(OPEN);
      jj_consume_token(PREFERENCE);
      label_17:
      while (true) {
        k = jj_consume_token(NAME);
        jj_consume_token(OPEN);
        t = jj_consume_token(NAME);
                                                            typePreference = t.toString();
                                                            System.out.println("type of preference ---> " + typePreference);
                                                                                                                        //object.add(typePreference);
                                                                                                                        lstVarPredicate = new ArrayList();
        label_18:
        while (true) {
          jj_consume_token(OPEN);
          t = jj_consume_token(NAME);
                                                       objectSymbol = t.toString();
          label_19:
          while (true) {
            t = jj_consume_token(NAME);
                                                       lstVarPredicate.add(t.toString());
            if (jj_2_24(20)) {
              ;
            } else {
              break label_19;
            }
          }
          jj_consume_token(CLOSE);
                                                                                          System.out.println(" ######## "+ objectSymbol);
                                                                                          for(Object pe : lstVarPredicate) { System.out.println("@@ " + pe);}

                                              predicate = new Predicate(objectSymbol,lstVarPredicate);

                                                 if (auxMap2.isEmpty())
                                                 {

                                                                                                        lstPredicate = new ArrayList<Object>();
                                                                                                        lstPredicate.add(predicate);


                                                                                                  }else
                                                                                                  {
                                                                                                     if (auxMap2.containsKey(typePreference))
                                                                                                     {
                                                                                                        lstPredicate = (List) auxMap2.get(typePreference);

                                                                                                        lstPredicate.add(predicate);
                                                                                                         lstVarPredicate = new  ArrayList() ;
                                                                                                        for(Object pe : lstPredicate) { System.out.println("%%%%%%% " + pe);}

                                                                                                         }
                                                                                                          else
                                                                                                          {
                                                                                                            lstPredicate = new ArrayList<Object>();
                                                                                                            System.out.println("Predicate to string: " + predicate.toString());
                                                                                                            lstPredicate.add(predicate);
                                                                                                            auxMap2.put(typePreference, lstPredicate);
                                                                                                            Predicate pre = (Predicate)lstPredicate.get(0);
                                                                                                        System.out.println("Predicate list inicial : " + pre.toString());
                                                                                                            lstVarPredicate = new  ArrayList() ;
                                                                                                          }

                                                                                                  }
          if (jj_2_25(20)) {
            ;
          } else {
            break label_18;
          }
        }
        jj_consume_token(CLOSE);
                           //  System.out.println(" Map ls ----> " + auxMap);  	 
                         auxMap2.put(typePreference, lstPredicate);
                        // IP.preferenceMap.put(typePreference, lstPredicate);
                         System.out.println(" MAP PREFERENCE -- > " + auxMap2);
                         //lstPredicate.clear();                        

        jj_consume_token(CLOSE);
        if (jj_2_26(20)) {
          ;
        } else {
          break label_17;
        }
      }
                     auxMap.put(k.toString(), auxMap2);
      if (jj_2_27(20)) {
        ;
      } else {
        break label_16;
      }
    }
                           System.out.println("*********************************** PRINT *************************************");
               Set keys = auxMap2.keySet();

               for (Object preference: keys) {
                                                List lst = auxMap2.get(preference);
                                                for(Object p: lst)
                                                {
                                                  Predicate auxPred = (Predicate)p;

                                                  System.out.println(preference +" " + auxPred.toString());
                                                }

               }
  }

  final public Map getAuxPreference(String objectSymbol) throws ParseException {
    Token t;
    //String objectSymbol="";  
    List value = new ArrayList();
    Map auxMap = new Hashtable();
            System.out.println(" Preference Input ");
    label_20:
    while (true) {
      label_21:
      while (true) {
        t = jj_consume_token(NAME);
                                       value.add(t.toString());
        if (jj_2_28(20)) {
          ;
        } else {
          break label_21;
        }
      }
                             auxMap.put(objectSymbol, value);
                            // System.out.println(" Preference 3 " + objectSymbol + " " + value);
                            // value.clear();

      jj_consume_token(CLOSE);
      if (jj_2_29(20)) {
        ;
      } else {
        break label_20;
      }
    }
      {if (true) return auxMap;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(TYPE_IDENT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TYPE_IDENT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    if (jj_3_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(OPEN)) return true;
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(REQUIREMENT_LABELS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(ACTION)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(PARAMETERS)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(PRECONDITION)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(EFFECT)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(TYPES)) return true;
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(REQUIREMENTS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
